# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from rec import schemas  # noqa: F401


class Location(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            venue = schemas.StrSchema
            address_1 = schemas.StrSchema
            address_2 = schemas.StrSchema
            city = schemas.StrSchema
            region = schemas.StrSchema
            postcode = schemas.StrSchema
            country = schemas.StrSchema
        
            @staticmethod
            def coordinates() -> typing.Type['Coordinates']:
                return Coordinates
            __annotations__ = {
                "venue": venue,
                "address_1": address_1,
                "address_2": address_2,
                "city": city,
                "region": region,
                "postcode": postcode,
                "country": country,
                "coordinates": coordinates,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["venue"]) -> MetaOapg.properties.venue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_1"]) -> MetaOapg.properties.address_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_2"]) -> MetaOapg.properties.address_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postcode"]) -> MetaOapg.properties.postcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> 'Coordinates': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["venue", "address_1", "address_2", "city", "region", "postcode", "country", "coordinates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["venue"]) -> typing.Union[MetaOapg.properties.venue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_1"]) -> typing.Union[MetaOapg.properties.address_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_2"]) -> typing.Union[MetaOapg.properties.address_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postcode"]) -> typing.Union[MetaOapg.properties.postcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union['Coordinates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["venue", "address_1", "address_2", "city", "region", "postcode", "country", "coordinates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        venue: typing.Union[MetaOapg.properties.venue, str, schemas.Unset] = schemas.unset,
        address_1: typing.Union[MetaOapg.properties.address_1, str, schemas.Unset] = schemas.unset,
        address_2: typing.Union[MetaOapg.properties.address_2, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        postcode: typing.Union[MetaOapg.properties.postcode, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        coordinates: typing.Union['Coordinates', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Location':
        return super().__new__(
            cls,
            *args,
            venue=venue,
            address_1=address_1,
            address_2=address_2,
            city=city,
            region=region,
            postcode=postcode,
            country=country,
            coordinates=coordinates,
            _configuration=_configuration,
            **kwargs,
        )

from rec.model.coordinates import Coordinates

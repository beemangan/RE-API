# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from rec import schemas  # noqa: F401


class Award(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int32Schema
        
            @staticmethod
            def event() -> typing.Type['IdInfo']:
                return IdInfo
            order = schemas.Int32Schema
            title = schemas.StrSchema
            
            
            class qualifications(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qualifications':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class designation(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "tournament": "TOURNAMENT",
                        "division": "DIVISION",
                    }
                
                @schemas.classproperty
                def TOURNAMENT(cls):
                    return cls("tournament")
                
                @schemas.classproperty
                def DIVISION(cls):
                    return cls("division")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'designation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class classification(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "champion": "CHAMPION",
                        "finalist": "FINALIST",
                        "semifinalist": "SEMIFINALIST",
                        "quarterfinalist": "QUARTERFINALIST",
                    }
                
                @schemas.classproperty
                def CHAMPION(cls):
                    return cls("champion")
                
                @schemas.classproperty
                def FINALIST(cls):
                    return cls("finalist")
                
                @schemas.classproperty
                def SEMIFINALIST(cls):
                    return cls("semifinalist")
                
                @schemas.classproperty
                def QUARTERFINALIST(cls):
                    return cls("quarterfinalist")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'classification':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class teamWinners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TeamAwardWinner']:
                        return TeamAwardWinner
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TeamAwardWinner'], typing.List['TeamAwardWinner']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'teamWinners':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TeamAwardWinner':
                    return super().__getitem__(i)
            
            
            class individualWinners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'individualWinners':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "event": event,
                "order": order,
                "title": title,
                "qualifications": qualifications,
                "designation": designation,
                "classification": classification,
                "teamWinners": teamWinners,
                "individualWinners": individualWinners,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualifications"]) -> MetaOapg.properties.qualifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["designation"]) -> MetaOapg.properties.designation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classification"]) -> MetaOapg.properties.classification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["teamWinners"]) -> MetaOapg.properties.teamWinners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["individualWinners"]) -> MetaOapg.properties.individualWinners: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "event", "order", "title", "qualifications", "designation", "classification", "teamWinners", "individualWinners", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> typing.Union['IdInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualifications"]) -> typing.Union[MetaOapg.properties.qualifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["designation"]) -> typing.Union[MetaOapg.properties.designation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classification"]) -> typing.Union[MetaOapg.properties.classification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["teamWinners"]) -> typing.Union[MetaOapg.properties.teamWinners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["individualWinners"]) -> typing.Union[MetaOapg.properties.individualWinners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "event", "order", "title", "qualifications", "designation", "classification", "teamWinners", "individualWinners", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        event: typing.Union['IdInfo', schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        qualifications: typing.Union[MetaOapg.properties.qualifications, list, tuple, schemas.Unset] = schemas.unset,
        designation: typing.Union[MetaOapg.properties.designation, None, str, schemas.Unset] = schemas.unset,
        classification: typing.Union[MetaOapg.properties.classification, None, str, schemas.Unset] = schemas.unset,
        teamWinners: typing.Union[MetaOapg.properties.teamWinners, list, tuple, schemas.Unset] = schemas.unset,
        individualWinners: typing.Union[MetaOapg.properties.individualWinners, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Award':
        return super().__new__(
            cls,
            *args,
            id=id,
            event=event,
            order=order,
            title=title,
            qualifications=qualifications,
            designation=designation,
            classification=classification,
            teamWinners=teamWinners,
            individualWinners=individualWinners,
            _configuration=_configuration,
            **kwargs,
        )

from rec.model.id_info import IdInfo
from rec.model.team_award_winner import TeamAwardWinner

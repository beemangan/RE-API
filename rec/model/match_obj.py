# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from rec import schemas  # noqa: F401


class MatchObj(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "division",
            "instance",
            "matchnum",
            "round",
            "scored",
            "name",
            "alliances",
            "id",
            "event",
        }
        
        class properties:
            id = schemas.Int32Schema
        
            @staticmethod
            def event() -> typing.Type['IdInfo']:
                return IdInfo
        
            @staticmethod
            def division() -> typing.Type['IdInfo']:
                return IdInfo
            round = schemas.Int32Schema
            instance = schemas.Int32Schema
            matchnum = schemas.Int32Schema
            scored = schemas.BoolSchema
            name = schemas.StrSchema
            
            
            class alliances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Alliance']:
                        return Alliance
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Alliance'], typing.List['Alliance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'alliances':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Alliance':
                    return super().__getitem__(i)
            scheduled = schemas.DateTimeSchema
            started = schemas.DateTimeSchema
            field = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "event": event,
                "division": division,
                "round": round,
                "instance": instance,
                "matchnum": matchnum,
                "scored": scored,
                "name": name,
                "alliances": alliances,
                "scheduled": scheduled,
                "started": started,
                "field": field,
            }
    
    division: 'IdInfo'
    instance: MetaOapg.properties.instance
    matchnum: MetaOapg.properties.matchnum
    round: MetaOapg.properties.round
    scored: MetaOapg.properties.scored
    name: MetaOapg.properties.name
    alliances: MetaOapg.properties.alliances
    id: MetaOapg.properties.id
    event: 'IdInfo'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["division"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["round"]) -> MetaOapg.properties.round: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchnum"]) -> MetaOapg.properties.matchnum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scored"]) -> MetaOapg.properties.scored: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alliances"]) -> MetaOapg.properties.alliances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled"]) -> MetaOapg.properties.scheduled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["started"]) -> MetaOapg.properties.started: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "event", "division", "round", "instance", "matchnum", "scored", "name", "alliances", "scheduled", "started", "field", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> 'IdInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["division"]) -> 'IdInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["round"]) -> MetaOapg.properties.round: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance"]) -> MetaOapg.properties.instance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchnum"]) -> MetaOapg.properties.matchnum: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scored"]) -> MetaOapg.properties.scored: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alliances"]) -> MetaOapg.properties.alliances: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled"]) -> typing.Union[MetaOapg.properties.scheduled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["started"]) -> typing.Union[MetaOapg.properties.started, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> typing.Union[MetaOapg.properties.field, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "event", "division", "round", "instance", "matchnum", "scored", "name", "alliances", "scheduled", "started", "field", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        division: 'IdInfo',
        instance: typing.Union[MetaOapg.properties.instance, decimal.Decimal, int, ],
        matchnum: typing.Union[MetaOapg.properties.matchnum, decimal.Decimal, int, ],
        round: typing.Union[MetaOapg.properties.round, decimal.Decimal, int, ],
        scored: typing.Union[MetaOapg.properties.scored, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        alliances: typing.Union[MetaOapg.properties.alliances, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        event: 'IdInfo',
        scheduled: typing.Union[MetaOapg.properties.scheduled, str, datetime, schemas.Unset] = schemas.unset,
        started: typing.Union[MetaOapg.properties.started, str, datetime, schemas.Unset] = schemas.unset,
        field: typing.Union[MetaOapg.properties.field, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MatchObj':
        return super().__new__(
            cls,
            *args,
            division=division,
            instance=instance,
            matchnum=matchnum,
            round=round,
            scored=scored,
            name=name,
            alliances=alliances,
            id=id,
            event=event,
            scheduled=scheduled,
            started=started,
            field=field,
            _configuration=_configuration,
            **kwargs,
        )

from rec.model.alliance import Alliance
from rec.model.id_info import IdInfo

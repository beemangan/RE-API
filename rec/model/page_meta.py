# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from rec import schemas  # noqa: F401


class PageMeta(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            current_page = schemas.IntSchema
            first_page_url = schemas.StrSchema
            _from = schemas.IntSchema
            last_page = schemas.IntSchema
            last_page_url = schemas.StrSchema
            next_page_url = schemas.StrSchema
            path = schemas.StrSchema
            per_page = schemas.IntSchema
            prev_page_url = schemas.StrSchema
            to = schemas.IntSchema
            total = schemas.IntSchema
            __annotations__ = {
                "current_page": current_page,
                "first_page_url": first_page_url,
                "from": _from,
                "last_page": last_page,
                "last_page_url": last_page_url,
                "next_page_url": next_page_url,
                "path": path,
                "per_page": per_page,
                "prev_page_url": prev_page_url,
                "to": to,
                "total": total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_page"]) -> MetaOapg.properties.current_page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_page_url"]) -> MetaOapg.properties.first_page_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_page"]) -> MetaOapg.properties.last_page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_page_url"]) -> MetaOapg.properties.last_page_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_page_url"]) -> MetaOapg.properties.next_page_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["per_page"]) -> MetaOapg.properties.per_page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prev_page_url"]) -> MetaOapg.properties.prev_page_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["current_page", "first_page_url", "from", "last_page", "last_page_url", "next_page_url", "path", "per_page", "prev_page_url", "to", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_page"]) -> typing.Union[MetaOapg.properties.current_page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_page_url"]) -> typing.Union[MetaOapg.properties.first_page_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_page"]) -> typing.Union[MetaOapg.properties.last_page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_page_url"]) -> typing.Union[MetaOapg.properties.last_page_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_page_url"]) -> typing.Union[MetaOapg.properties.next_page_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["per_page"]) -> typing.Union[MetaOapg.properties.per_page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prev_page_url"]) -> typing.Union[MetaOapg.properties.prev_page_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["current_page", "first_page_url", "from", "last_page", "last_page_url", "next_page_url", "path", "per_page", "prev_page_url", "to", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        current_page: typing.Union[MetaOapg.properties.current_page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        first_page_url: typing.Union[MetaOapg.properties.first_page_url, str, schemas.Unset] = schemas.unset,
        last_page: typing.Union[MetaOapg.properties.last_page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_page_url: typing.Union[MetaOapg.properties.last_page_url, str, schemas.Unset] = schemas.unset,
        next_page_url: typing.Union[MetaOapg.properties.next_page_url, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        per_page: typing.Union[MetaOapg.properties.per_page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        prev_page_url: typing.Union[MetaOapg.properties.prev_page_url, str, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PageMeta':
        return super().__new__(
            cls,
            *args,
            current_page=current_page,
            first_page_url=first_page_url,
            last_page=last_page,
            last_page_url=last_page_url,
            next_page_url=next_page_url,
            path=path,
            per_page=per_page,
            prev_page_url=prev_page_url,
            to=to,
            total=total,
            _configuration=_configuration,
            **kwargs,
        )

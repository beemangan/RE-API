# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "season",
            "location",
            "id",
            "program",
            "sku",
        }
        
        class properties:
            id = schemas.Int32Schema
            sku = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def season() -> typing.Type['IdInfo']:
                return IdInfo
        
            @staticmethod
            def program() -> typing.Type['IdInfo']:
                return IdInfo
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
            start = schemas.DateTimeSchema
            end = schemas.DateTimeSchema
            
            
            class divisions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Division']:
                        return Division
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Division'], typing.List['Division']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'divisions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Division':
                    return super().__getitem__(i)
        
            @staticmethod
            def level() -> typing.Type['EventLevel']:
                return EventLevel
            ongoing = schemas.BoolSchema
            awards_finalized = schemas.BoolSchema
        
            @staticmethod
            def event_type() -> typing.Type['EventType']:
                return EventType
            __annotations__ = {
                "id": id,
                "sku": sku,
                "name": name,
                "season": season,
                "program": program,
                "location": location,
                "start": start,
                "end": end,
                "divisions": divisions,
                "level": level,
                "ongoing": ongoing,
                "awards_finalized": awards_finalized,
                "event_type": event_type,
            }
    
    name: MetaOapg.properties.name
    season: 'IdInfo'
    location: 'Location'
    id: MetaOapg.properties.id
    program: 'IdInfo'
    sku: MetaOapg.properties.sku
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["season"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["program"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["divisions"]) -> MetaOapg.properties.divisions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["level"]) -> 'EventLevel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ongoing"]) -> MetaOapg.properties.ongoing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awards_finalized"]) -> MetaOapg.properties.awards_finalized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> 'EventType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "sku", "name", "season", "program", "location", "start", "end", "divisions", "level", "ongoing", "awards_finalized", "event_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["season"]) -> 'IdInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["program"]) -> 'IdInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union[MetaOapg.properties.start, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union[MetaOapg.properties.end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["divisions"]) -> typing.Union[MetaOapg.properties.divisions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["level"]) -> typing.Union['EventLevel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ongoing"]) -> typing.Union[MetaOapg.properties.ongoing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awards_finalized"]) -> typing.Union[MetaOapg.properties.awards_finalized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> typing.Union['EventType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "sku", "name", "season", "program", "location", "start", "end", "divisions", "level", "ongoing", "awards_finalized", "event_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        season: 'IdInfo',
        location: 'Location',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        program: 'IdInfo',
        sku: typing.Union[MetaOapg.properties.sku, str, ],
        start: typing.Union[MetaOapg.properties.start, str, datetime, schemas.Unset] = schemas.unset,
        end: typing.Union[MetaOapg.properties.end, str, datetime, schemas.Unset] = schemas.unset,
        divisions: typing.Union[MetaOapg.properties.divisions, list, tuple, schemas.Unset] = schemas.unset,
        level: typing.Union['EventLevel', schemas.Unset] = schemas.unset,
        ongoing: typing.Union[MetaOapg.properties.ongoing, bool, schemas.Unset] = schemas.unset,
        awards_finalized: typing.Union[MetaOapg.properties.awards_finalized, bool, schemas.Unset] = schemas.unset,
        event_type: typing.Union['EventType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            name=name,
            season=season,
            location=location,
            id=id,
            program=program,
            sku=sku,
            start=start,
            end=end,
            divisions=divisions,
            level=level,
            ongoing=ongoing,
            awards_finalized=awards_finalized,
            event_type=event_type,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.division import Division
from openapi_client.model.event_level import EventLevel
from openapi_client.model.event_type import EventType
from openapi_client.model.id_info import IdInfo
from openapi_client.model.location import Location

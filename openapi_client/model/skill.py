# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Skill(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int32Schema
        
            @staticmethod
            def event() -> typing.Type['IdInfo']:
                return IdInfo
        
            @staticmethod
            def team() -> typing.Type['IdInfo']:
                return IdInfo
        
            @staticmethod
            def type() -> typing.Type['SkillType']:
                return SkillType
        
            @staticmethod
            def season() -> typing.Type['IdInfo']:
                return IdInfo
        
            @staticmethod
            def division() -> typing.Type['IdInfo']:
                return IdInfo
            rank = schemas.Int32Schema
            score = schemas.Int32Schema
            attempts = schemas.Int32Schema
            __annotations__ = {
                "id": id,
                "event": event,
                "team": team,
                "type": type,
                "season": season,
                "division": division,
                "rank": rank,
                "score": score,
                "attempts": attempts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'SkillType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["season"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["division"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rank"]) -> MetaOapg.properties.rank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attempts"]) -> MetaOapg.properties.attempts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "event", "team", "type", "season", "division", "rank", "score", "attempts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event"]) -> typing.Union['IdInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['IdInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['SkillType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["season"]) -> typing.Union['IdInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["division"]) -> typing.Union['IdInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rank"]) -> typing.Union[MetaOapg.properties.rank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attempts"]) -> typing.Union[MetaOapg.properties.attempts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "event", "team", "type", "season", "division", "rank", "score", "attempts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        event: typing.Union['IdInfo', schemas.Unset] = schemas.unset,
        team: typing.Union['IdInfo', schemas.Unset] = schemas.unset,
        type: typing.Union['SkillType', schemas.Unset] = schemas.unset,
        season: typing.Union['IdInfo', schemas.Unset] = schemas.unset,
        division: typing.Union['IdInfo', schemas.Unset] = schemas.unset,
        rank: typing.Union[MetaOapg.properties.rank, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attempts: typing.Union[MetaOapg.properties.attempts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Skill':
        return super().__new__(
            cls,
            *args,
            id=id,
            event=event,
            team=team,
            type=type,
            season=season,
            division=division,
            rank=rank,
            score=score,
            attempts=attempts,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.id_info import IdInfo
from openapi_client.model.skill_type import SkillType

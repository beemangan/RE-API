# coding: utf-8

"""
    Public Robot Events API

    An API to access data on Robot Events officially. ## Request Metadata Pagination is performed the same way throughout each pageable endpoint using the query parameters `page` and `per_page`. Please not that dates should be formatted according to RFC3339.   # noqa: E501

    The version of the OpenAPI document: 1.0.21
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Team(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "number",
            "id",
            "program",
        }
        
        class properties:
            id = schemas.Int32Schema
            number = schemas.StrSchema
        
            @staticmethod
            def program() -> typing.Type['IdInfo']:
                return IdInfo
            team_name = schemas.StrSchema
            robot_name = schemas.StrSchema
            organization = schemas.StrSchema
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
            registered = schemas.BoolSchema
        
            @staticmethod
            def grade() -> typing.Type['Grade']:
                return Grade
            __annotations__ = {
                "id": id,
                "number": number,
                "program": program,
                "team_name": team_name,
                "robot_name": robot_name,
                "organization": organization,
                "location": location,
                "registered": registered,
                "grade": grade,
            }
    
    number: MetaOapg.properties.number
    id: MetaOapg.properties.id
    program: 'IdInfo'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["program"]) -> 'IdInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_name"]) -> MetaOapg.properties.team_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["robot_name"]) -> MetaOapg.properties.robot_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registered"]) -> MetaOapg.properties.registered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grade"]) -> 'Grade': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "number", "program", "team_name", "robot_name", "organization", "location", "registered", "grade", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number"]) -> MetaOapg.properties.number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["program"]) -> 'IdInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_name"]) -> typing.Union[MetaOapg.properties.team_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["robot_name"]) -> typing.Union[MetaOapg.properties.robot_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union[MetaOapg.properties.organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registered"]) -> typing.Union[MetaOapg.properties.registered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grade"]) -> typing.Union['Grade', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "number", "program", "team_name", "robot_name", "organization", "location", "registered", "grade", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        number: typing.Union[MetaOapg.properties.number, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        program: 'IdInfo',
        team_name: typing.Union[MetaOapg.properties.team_name, str, schemas.Unset] = schemas.unset,
        robot_name: typing.Union[MetaOapg.properties.robot_name, str, schemas.Unset] = schemas.unset,
        organization: typing.Union[MetaOapg.properties.organization, str, schemas.Unset] = schemas.unset,
        location: typing.Union['Location', schemas.Unset] = schemas.unset,
        registered: typing.Union[MetaOapg.properties.registered, bool, schemas.Unset] = schemas.unset,
        grade: typing.Union['Grade', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Team':
        return super().__new__(
            cls,
            *args,
            number=number,
            id=id,
            program=program,
            team_name=team_name,
            robot_name=robot_name,
            organization=organization,
            location=location,
            registered=registered,
            grade=grade,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.grade import Grade
from openapi_client.model.id_info import IdInfo
from openapi_client.model.location import Location
